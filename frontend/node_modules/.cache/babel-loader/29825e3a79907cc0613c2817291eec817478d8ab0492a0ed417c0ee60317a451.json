{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vinseth\\\\Downloads\\\\task\\\\frontend\\\\src\\\\pages\\\\Authentication.js\";\nimport { json, redirect } from \"react-router-dom\";\nimport AuthForm from \"../components/AuthForm\";\nimport { msalInstance } from '../index.js';\nimport { loginRequest } from \"../util/auth-config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action({\n  request\n}) {\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get(\"mode\") || \"login\";\n  if (mode !== \"login\" && mode !== \"signup\" && mode !== 'sso') {\n    throw json({\n      message: \"Unsupported mode.\"\n    }, {\n      status: 422\n    });\n  }\n\n  // SSO Scenario\n  if (mode === 'sso') {\n    try {\n      // Ensure msalInstance.getAllAccounts() is populated before proceeding.\n      // Fix: Add logging in the front end to verify the accounts array and debug the active account logic.\n      const accounts = msalInstance.getAllAccounts();\n      if (!accounts || accounts.length === 0) {\n        // Trigger login if no account is active\n        const loginResponse = await msalInstance.loginPopup(loginRequest);\n\n        // Extract the authorization code from the response\n        const authCode = loginResponse.idToken || loginResponse.authorizationCode;\n        if (!authCode) {\n          throw new Error(\"Authorization code not found in login response.\");\n        }\n\n        // msalInstance.setActiveAccount(loginRequest.account);\n\n        // // Ensure that after loginPopup, you extract the code parameter (e.g., from the URL or a token response) and send it to the backend.\n        // const activeAccount = msalInstance.getActiveAccount();\n        // if(!activeAccount){\n        //   throw new Error(\"No active account found after SSO login\")\n        // }\n\n        // // Send the user's email to the backend for SSO login\n        // const email = activeAccount.username;\n\n        const response = await fetch('http://localhost:8080/sso', {\n          method: 'POST',\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            code: authCode\n          })\n        });\n        if (response.status === 422 || response.status === 401) {\n          return response;\n        }\n        if (!response.ok) {\n          throw json({\n            message: \"SSO authentication failed.\"\n          }, {\n            status: 500\n          });\n        }\n        const resData = await response.json();\n        const token = resData.token;\n\n        // Store the token and expiration\n        localStorage.setItem(\"token\", token);\n        const expiration = new Date();\n        expiration.setHours(expiration.getHours() + 1);\n        localStorage.setItem(\"expiration\", expiration.toISOString());\n        return redirect(\"/\");\n      }\n\n      // Handle existing account (silent login scenario)\n      const activeAccount = msalInstance.getActiveAccount();\n      if (!activeAccount) {\n        throw new Error(\"No active account found after SSO login.\");\n      }\n\n      // Send the user's email to the backend for SSO login\n      const email = activeAccount.username;\n      const response = await fetch('http://localhost:8080/sso', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (!response.ok) {\n        if (response.status === 422 || response.status === 401) {\n          return response;\n        }\n        throw new Error(\"SSO authentication failed.\");\n      }\n      const resData = await response.json();\n      const token = resData.token;\n\n      // Store the token and expiration\n      localStorage.setItem(\"token\", token);\n      const expiration = new Date();\n      expiration.setHours(expiration.getHours() + 1);\n      localStorage.setItem(\"expiration\", expiration.toISOString());\n      return redirect(\"/\");\n    } catch (error) {\n      console.error(\"SSO login error\", error);\n      throw json({\n        message: \"SSO login failed.\"\n      }, {\n        status: 500\n      });\n    }\n  }\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\")\n  };\n  const response = await fetch(\"http://localhost:8080/\" + mode, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(authData)\n  });\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: \"Could not authenticate user.\"\n    }, {\n      status: 500\n    });\n  }\n  const resData = await response.json();\n  const token = resData.token;\n\n  // or maybe store in session storage for SSO\n  localStorage.setItem(\"token\", token);\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours() + 1);\n  localStorage.setItem('expiration', expiration.toISOString());\n\n  // manage the token (soon)\n  return redirect(\"/\");\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","redirect","AuthForm","msalInstance","loginRequest","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","searchParams","URL","url","mode","get","message","status","accounts","getAllAccounts","length","loginResponse","loginPopup","authCode","idToken","authorizationCode","Error","response","fetch","method","headers","body","JSON","stringify","code","ok","resData","token","localStorage","setItem","expiration","Date","setHours","getHours","toISOString","activeAccount","getActiveAccount","email","username","error","console","data","formData","authData","password","$RefreshReg$"],"sources":["C:/Users/vinseth/Downloads/task/frontend/src/pages/Authentication.js"],"sourcesContent":["import { json, redirect } from \"react-router-dom\";\nimport AuthForm from \"../components/AuthForm\";\nimport { msalInstance } from '../index.js';\nimport { loginRequest } from \"../util/auth-config\";\n\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport async function action({ request }) {\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get(\"mode\") || \"login\";\n\n  if (mode !== \"login\" && mode !== \"signup\" && mode !== 'sso') {\n    throw json({ message: \"Unsupported mode.\" }, { status: 422 });\n  }\n\n  // SSO Scenario\n  if(mode === 'sso'){\n    try {\n\n      // Ensure msalInstance.getAllAccounts() is populated before proceeding.\n      // Fix: Add logging in the front end to verify the accounts array and debug the active account logic.\n      const accounts = msalInstance.getAllAccounts();\n\n      if(!accounts || accounts.length === 0){\n        // Trigger login if no account is active\n        const loginResponse = await msalInstance.loginPopup(loginRequest);\n\n        // Extract the authorization code from the response\n        const authCode = loginResponse.idToken || loginResponse.authorizationCode;\n        if (!authCode) {\n            throw new Error(\"Authorization code not found in login response.\");\n        }\n\n        // msalInstance.setActiveAccount(loginRequest.account);\n      \n\n      // // Ensure that after loginPopup, you extract the code parameter (e.g., from the URL or a token response) and send it to the backend.\n      // const activeAccount = msalInstance.getActiveAccount();\n      // if(!activeAccount){\n      //   throw new Error(\"No active account found after SSO login\")\n      // }\n\n      // // Send the user's email to the backend for SSO login\n      // const email = activeAccount.username;\n\n      const response = await fetch('http://localhost:8080/sso', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\" : \"application/json\",\n        },\n        body: JSON.stringify({code: authCode}),\n      });\n\n      if (response.status === 422 || response.status === 401) {\n        return response;\n      }\n\n      if (!response.ok) {\n        throw json({ message: \"SSO authentication failed.\" }, { status: 500 });\n      }\n\n      const resData = await response.json();\n      const token = resData.token;\n\n      // Store the token and expiration\n      localStorage.setItem(\"token\", token);\n      const expiration = new Date();\n      expiration.setHours(expiration.getHours() + 1);\n      localStorage.setItem(\"expiration\", expiration.toISOString());\n\n      return redirect(\"/\");\n    }\n\n    // Handle existing account (silent login scenario)\n    const activeAccount = msalInstance.getActiveAccount();\n    if (!activeAccount) {\n         throw new Error(\"No active account found after SSO login.\");\n    }\n\n        // Send the user's email to the backend for SSO login\n        const email = activeAccount.username;\n        const response = await fetch('http://localhost:8080/sso', {\n          method: 'POST',\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ email }),\n        });\n\n        if (!response.ok) {\n          if (response.status === 422 || response.status === 401) {\n            return response;\n          }\n          throw new Error(\"SSO authentication failed.\");\n        }\n    \n        const resData = await response.json();\n        const token = resData.token;\n    \n        // Store the token and expiration\n        localStorage.setItem(\"token\", token);\n        const expiration = new Date();\n        expiration.setHours(expiration.getHours() + 1);\n        localStorage.setItem(\"expiration\", expiration.toISOString());\n    \n        return redirect(\"/\");\n\n    } \n\n    \n    catch (error) {\n      console.error(\"SSO login error\", error);\n      throw json({ message: \"SSO login failed.\" }, { status: 500 });\n    }\n  }\n\n\n\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\"),\n  };\n\n  const response = await fetch(\"http://localhost:8080/\" + mode, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(authData),\n  });\n\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n\n  if (!response.ok) {\n    throw json({ message: \"Could not authenticate user.\" }, { status: 500 });\n  }\n\n  const resData = await response.json();\n  const token = resData.token;\n\n  // or maybe store in session storage for SSO\n  localStorage.setItem(\"token\", token);\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours()+1);\n  localStorage.setItem('expiration', expiration.toISOString());\n\n  // manage the token (soon)\n  return redirect(\"/\");\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vinseth\\\\Downloads\\\\task\\\\frontend\\\\src\\\\pages\\\\Authentication.js\";\nimport { json, redirect } from \"react-router-dom\";\nimport AuthForm from \"../components/AuthForm\";\nimport { msalInstance } from '../index.js';\nimport { loginRequest } from \"../util/auth-config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action({\n  request\n}) {\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get(\"mode\") || \"login\";\n  if (mode !== \"login\" && mode !== \"signup\" && mode !== 'sso') {\n    throw json({\n      message: \"Unsupported mode.\"\n    }, {\n      status: 422\n    });\n  }\n\n  // SSO Scenario\n  if (mode === 'sso') {\n    try {\n      const accounts = msalInstance.getAllAccounts();\n      if (!accounts || accounts.length === 0) {\n        // Trigger login if no account is active\n        const loginResponse = await msalInstance.loginPopup(loginRequest);\n        msalInstance.setActiveAccount(loginRequest.account);\n      }\n      const activeAccount = msalInstance.getActiveAccount();\n      if (!activeAccount) {\n        throw new Error(\"No active account found after SSO login\");\n      }\n\n      // Send the user's email to the backend for SSO login\n      const email = activeAccount.username;\n      const response = await fetch('http://localhost:8080/sso', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (response.status === 422 || response.status === 401) {\n        return response;\n      }\n      if (!response.ok) {\n        throw json({\n          message: \"SSO authentication failed.\"\n        }, {\n          status: 500\n        });\n      }\n      const resData = await response.json();\n      const token = resData.token;\n\n      // Store the token and expiration\n      localStorage.setItem(\"token\", token);\n      const expiration = new Date();\n      expiration.setHours(expiration.getHours() + 1);\n      localStorage.setItem(\"expiration\", expiration.toISOString());\n      return redirect(\"/\");\n    } catch (error) {\n      throw json({\n        message: \"SSO login failed.\"\n      }, {\n        status: 500\n      });\n    }\n  }\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\")\n  };\n  const response = await fetch(\"http://localhost:8080/\" + mode, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(authData)\n  });\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: \"Could not authenticate user.\"\n    }, {\n      status: 500\n    });\n  }\n  const resData = await response.json();\n  const token = resData.token;\n\n  // or maybe store in session storage for SSO\n  localStorage.setItem(\"token\", token);\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours() + 1);\n  localStorage.setItem('expiration', expiration.toISOString());\n\n  // manage the token (soon)\n  return redirect(\"/\");\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","redirect","AuthForm","msalInstance","loginRequest","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","searchParams","URL","url","mode","get","message","status","accounts","getAllAccounts","length","loginResponse","loginPopup","setActiveAccount","account","activeAccount","getActiveAccount","Error","email","username","response","fetch","method","headers","body","JSON","stringify","ok","resData","token","localStorage","setItem","expiration","Date","setHours","getHours","toISOString","error","data","formData","authData","password","$RefreshReg$"],"sources":["C:/Users/vinseth/Downloads/task/frontend/src/pages/Authentication.js"],"sourcesContent":["import { json, redirect } from \"react-router-dom\";\nimport AuthForm from \"../components/AuthForm\";\nimport {msalInstance} from '../index.js';\nimport { loginRequest } from \"../util/auth-config\";\n\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport async function action({ request }) {\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get(\"mode\") || \"login\";\n\n  if (mode !== \"login\" && mode !== \"signup\" && mode !== 'sso') {\n    throw json({ message: \"Unsupported mode.\" }, { status: 422 });\n  }\n\n  // SSO Scenario\n  if(mode === 'sso'){\n    try {\n      const accounts = msalInstance.getAllAccounts();\n      if(!accounts || accounts.length === 0){\n        // Trigger login if no account is active\n        const loginResponse = await msalInstance.loginPopup(loginRequest);\n        msalInstance.setActiveAccount(loginRequest.account);\n      }\n\n      const activeAccount = msalInstance.getActiveAccount();\n      if(!activeAccount){\n        throw new Error(\"No active account found after SSO login\")\n      }\n\n      // Send the user's email to the backend for SSO login\n      const email = activeAccount.username;\n      const response = await fetch('http://localhost:8080/sso', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\" : \"application/json\",\n        },\n        body: JSON.stringify({email}),\n      });\n\n      if (response.status === 422 || response.status === 401) {\n        return response;\n      }\n\n      if (!response.ok) {\n        throw json({ message: \"SSO authentication failed.\" }, { status: 500 });\n      }\n\n      const resData = await response.json();\n      const token = resData.token;\n\n      // Store the token and expiration\n      localStorage.setItem(\"token\", token);\n      const expiration = new Date();\n      expiration.setHours(expiration.getHours() + 1);\n      localStorage.setItem(\"expiration\", expiration.toISOString());\n\n      return redirect(\"/\");\n\n    } catch (error) {\n      throw json({ message: \"SSO login failed.\" }, { status: 500 });\n    }\n  }\n\n\n\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\"),\n  };\n\n  const response = await fetch(\"http://localhost:8080/\" + mode, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(authData),\n  });\n\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n\n  if (!response.ok) {\n    throw json({ message: \"Could not authenticate user.\" }, { status: 500 });\n  }\n\n  const resData = await response.json();\n  const token = resData.token;\n\n  // or maybe store in session storage for SSO\n  localStorage.setItem(\"token\", token);\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours()+1);\n  localStorage.setItem('expiration', expiration.toISOString());\n\n  // manage the token (soon)\n  return redirect(\"/\");\n}\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAAQC,YAAY,QAAO,aAAa;AACxC,SAASC,YAAY,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,oBAAOD,OAAA,CAACJ,QAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB;AAACC,EAAA,GAFQL,kBAAkB;AAI3B,eAAeA,kBAAkB;AAEjC,OAAO,eAAeM,MAAMA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EACxC,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY;EACtD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO;EAEhD,IAAID,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,KAAK,EAAE;IAC3D,MAAMlB,IAAI,CAAC;MAAEoB,OAAO,EAAE;IAAoB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAC/D;;EAEA;EACA,IAAGH,IAAI,KAAK,KAAK,EAAC;IAChB,IAAI;MACF,MAAMI,QAAQ,GAAGnB,YAAY,CAACoB,cAAc,CAAC,CAAC;MAC9C,IAAG,CAACD,QAAQ,IAAIA,QAAQ,CAACE,MAAM,KAAK,CAAC,EAAC;QACpC;QACA,MAAMC,aAAa,GAAG,MAAMtB,YAAY,CAACuB,UAAU,CAACtB,YAAY,CAAC;QACjED,YAAY,CAACwB,gBAAgB,CAACvB,YAAY,CAACwB,OAAO,CAAC;MACrD;MAEA,MAAMC,aAAa,GAAG1B,YAAY,CAAC2B,gBAAgB,CAAC,CAAC;MACrD,IAAG,CAACD,aAAa,EAAC;QAChB,MAAM,IAAIE,KAAK,CAAC,yCAAyC,CAAC;MAC5D;;MAEA;MACA,MAAMC,KAAK,GAAGH,aAAa,CAACI,QAAQ;MACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAA2B,EAAE;QACxDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAG;QACnB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAACR;QAAK,CAAC;MAC9B,CAAC,CAAC;MAEF,IAAIE,QAAQ,CAACb,MAAM,KAAK,GAAG,IAAIa,QAAQ,CAACb,MAAM,KAAK,GAAG,EAAE;QACtD,OAAOa,QAAQ;MACjB;MAEA,IAAI,CAACA,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMzC,IAAI,CAAC;UAAEoB,OAAO,EAAE;QAA6B,CAAC,EAAE;UAAEC,MAAM,EAAE;QAAI,CAAC,CAAC;MACxE;MAEA,MAAMqB,OAAO,GAAG,MAAMR,QAAQ,CAAClC,IAAI,CAAC,CAAC;MACrC,MAAM2C,KAAK,GAAGD,OAAO,CAACC,KAAK;;MAE3B;MACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;MACpC,MAAMG,UAAU,GAAG,IAAIC,IAAI,CAAC,CAAC;MAC7BD,UAAU,CAACE,QAAQ,CAACF,UAAU,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC9CL,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,UAAU,CAACI,WAAW,CAAC,CAAC,CAAC;MAE5D,OAAOjD,QAAQ,CAAC,GAAG,CAAC;IAEtB,CAAC,CAAC,OAAOkD,KAAK,EAAE;MACd,MAAMnD,IAAI,CAAC;QAAEoB,OAAO,EAAE;MAAoB,CAAC,EAAE;QAAEC,MAAM,EAAE;MAAI,CAAC,CAAC;IAC/D;EACF;EAIA,MAAM+B,IAAI,GAAG,MAAMtC,OAAO,CAACuC,QAAQ,CAAC,CAAC;EACrC,MAAMC,QAAQ,GAAG;IACftB,KAAK,EAAEoB,IAAI,CAACjC,GAAG,CAAC,OAAO,CAAC;IACxBoC,QAAQ,EAAEH,IAAI,CAACjC,GAAG,CAAC,UAAU;EAC/B,CAAC;EAED,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGjB,IAAI,EAAE;IAC5DkB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACc,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAIpB,QAAQ,CAACb,MAAM,KAAK,GAAG,IAAIa,QAAQ,CAACb,MAAM,KAAK,GAAG,EAAE;IACtD,OAAOa,QAAQ;EACjB;EAEA,IAAI,CAACA,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMzC,IAAI,CAAC;MAAEoB,OAAO,EAAE;IAA+B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAC1E;EAEA,MAAMqB,OAAO,GAAG,MAAMR,QAAQ,CAAClC,IAAI,CAAC,CAAC;EACrC,MAAM2C,KAAK,GAAGD,OAAO,CAACC,KAAK;;EAE3B;EACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACpC,MAAMG,UAAU,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC7BD,UAAU,CAACE,QAAQ,CAACF,UAAU,CAACG,QAAQ,CAAC,CAAC,GAAC,CAAC,CAAC;EAC5CL,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,UAAU,CAACI,WAAW,CAAC,CAAC,CAAC;;EAE5D;EACA,OAAOjD,QAAQ,CAAC,GAAG,CAAC;AACtB;AAAC,IAAAW,EAAA;AAAA4C,YAAA,CAAA5C,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}